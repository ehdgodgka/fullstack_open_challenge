{"version":3,"sources":["components/Notification.js","components/Filter.js","components/services/person.js","components/PersonForm.js","components/PersonList.js","components/App.js","index.js"],"names":["Notification","style","message","className","Filter","persons","useState","filterInput","setFilterInput","value","onChange","event","target","filter","person","name","toLowerCase","indexOf","map","key","number","baseUrl","axios","get","newObject","post","id","put","delete","PersonForm","setPersons","setNotification","notiTimer","setNotiTimer","newName","setNewName","newNumber","setNewNumber","addInfo","a","preventDefault","personService","newInfo","then","response","clearTimeout","setTimeout","concat","data","catch","error","nameOf","window","confirm","find","onSubmit","type","PersonList","onClick","deleteHandler","App","notification","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d0bff62.chunk.js","sourcesContent":["import React from \"react\";\nconst Notification = ({ style, message }) => {\n  if (!message) {\n    return null;\n  }\n\n  return <div className={`noti ${style}`}>{message}</div>;\n};\nexport default Notification;\n","import React, { useState } from \"react\";\nconst Filter = ({ persons }) => {\n  const [filterInput, setFilterInput] = useState(\"\");\n  const filterInputHandler = (event) => {\n    setFilterInput(event.target.value);\n  };\n  return (\n    <>\n      filter shown with\n      <input value={filterInput} onChange={filterInputHandler} />\n      {filterInput &&\n        persons\n          .filter((person) => !person.name.toLowerCase().indexOf(filterInput.toLowerCase()))\n          .map((person) => (\n            <li key={person.name}>\n              {person.name} {person.number}\n            </li>\n          ))}\n    </>\n  );\n};\n\nexport default Filter;\n","import axios from \"axios\";\nconst baseUrl = \"/api/persons\";\n\nconst getAll = () => {\n  return axios.get(baseUrl);\n};\n\nconst create = (newObject) => {\n  return axios.post(baseUrl, newObject);\n};\n\nconst update = (id,newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject);\n};\nconst remove = (id) => {\n  return axios.delete(`${baseUrl}/${id}`);\n};\nexport default { getAll, create, update, remove };\n","import React, { useState } from \"react\";\nimport personService from \"../components/services/person\";\nconst PersonForm = ({ persons, setPersons, setNotification, notiTimer, setNotiTimer }) => {\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n\n  const nameInputHandler = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const numberInputHandler = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  const addInfo = async (event) => {\n    event.preventDefault();\n    const newInfo = { name: newName, number: newNumber };\n    personService\n      .create(newInfo)\n      .then((response) => {\n        if (notiTimer) {\n          clearTimeout(notiTimer);\n        }\n        setNotiTimer(setTimeout(() => setNotification({}), 3000));\n        setNotification({ style: \"success\", message: `Added ${newInfo.name}` });\n        setPersons(persons.concat(response.data));\n      })\n      .catch((error) => {\n        if (nameOf()) {\n          if (window.confirm(`${newName} already existed. do you want to update?`)) {\n            const id = nameOf().id;\n            personService\n              .update(id, newInfo)\n              .then((response) => {\n                if (notiTimer) {\n                  clearTimeout(notiTimer);\n                }\n                setNotiTimer(setTimeout(() => setNotification({}), 3000));\n                setNotification({ style: \"success\", message: `Updated ${newInfo.name}` });\n                setPersons(() =>\n                  persons.map((person) => (person.name === newName ? response.data : person))\n                );\n              })\n              .catch((error) => {\n                setNotification({ style: \"error\", message: error.response.data.message });\n              });\n          }\n        } else {\n          setNotification({ style: \"error\", message: error.response.data.message });\n        }\n      });\n\n    // if (nameOf()) {\n    //   if (window.confirm(`${newName} already existed. do you want to update?`)) {\n    //     const id = nameOf().id;\n    //     personService.update(id, newInfo).then((response) => {\n    //       if (notiTimer) {\n    //         clearTimeout(notiTimer);\n    //       }\n    //       setNotiTimer(setTimeout(() => setNotification({}), 3000));\n    //       setNotification({ style: \"success\", message: `Updated ${newInfo.name}` });\n    //       setPersons(() =>\n    //         persons.map((person) => (person.name === newName ? response.data : person))\n    //       );\n    //     });\n    //   }\n    // } else {\n    //   personService.create(newInfo).then((response) => {\n    //     if (notiTimer) {\n    //       clearTimeout(notiTimer);\n    //     }\n    //     setNotiTimer(setTimeout(() => setNotification({}), 3000));\n    //     setNotification({ style: \"success\", message: `Added ${newInfo.name}` });\n    //     setPersons(persons.concat(response.data));\n    //   });\n    // }\n  };\n  const nameOf = () => persons.find((person) => person.name === newName);\n  return (\n    <form onSubmit={addInfo}>\n      <div>\n        name:\n        <input value={newName} onChange={nameInputHandler} />\n      </div>\n      <div>\n        number: <input value={newNumber} onChange={numberInputHandler} />\n      </div>\n      <div>\n        <button type='submit'>add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default PersonForm;\n","import React from \"react\";\nimport personService from \"../components/services/person\";\nconst PersonList = ({ persons, setPersons, setNotification, notiTimer, setNotiTimer }) => {\n  const deleteHandler = ({ id, name }) => {\n    if (window.confirm(`delete ${name}?`)) {\n      personService\n        .remove(id)\n        .then((response) => {\n          setPersons(persons.filter((person) => person.id !== id));\n          if (notiTimer) {\n            clearTimeout(notiTimer);\n          }\n          setNotiTimer(setTimeout(() => setNotification({}), 3000));\n          setNotification({ style: \"success\", message: `${name} deleted` });\n        })\n        .catch((error) => {\n          if (notiTimer) {\n            clearTimeout(notiTimer);\n          }\n          setNotiTimer(setTimeout(() => setNotification({}), 3000));\n          setNotification({ style: \"error\", message: `${name}' was already removed from server` });\n          setPersons(persons.filter((person) => person.id !== id));\n        });\n    }\n  };\n  return (\n    <ul>\n      {persons.map((person) => (\n        <li key={person.name}>\n          {person.name} {person.number}\n          <button onClick={() => deleteHandler(person)}>delete</button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default PersonList;\n","import React, { useState, useEffect } from \"react\";\nimport Notification from \"./Notification\";\nimport Filter from \"./Filter\";\nimport PersonForm from \"./PersonForm\";\nimport PersonList from \"./PersonList\";\nimport personService from \"./services/person\";\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [notification, setNotification] = useState({});\n  const [notiTimer, setNotiTimer] = useState(null);\n  useEffect(() => {\n    personService.getAll().then((response) => {\n      setPersons(response.data);\n    });\n  }, []);\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification style={notification.style} message={notification.message} />\n      <Filter persons={persons} />\n      <h2>add a new</h2>\n      <PersonForm\n        persons={persons}\n        setPersons={setPersons}\n        setNotification={setNotification}\n        notiTimer={notiTimer}\n        setNotiTimer={setNotiTimer}\n      />\n      <h2>Numbers</h2>\n      <PersonList\n        persons={persons}\n        setPersons={setPersons}\n        setNotification={setNotification}\n        notiTimer={notiTimer}\n        setNotiTimer={setNotiTimer}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}