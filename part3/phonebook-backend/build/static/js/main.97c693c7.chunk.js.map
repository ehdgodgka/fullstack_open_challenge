{"version":3,"sources":["components/Notification.js","components/Filter.js","components/services/person.js","components/PersonForm.js","components/PersonList.js","components/App.js","index.js"],"names":["Notification","style","message","className","Filter","persons","useState","filterInput","setFilterInput","value","onChange","event","target","filter","person","name","toLowerCase","indexOf","map","key","number","baseUrl","axios","get","newObject","post","id","put","delete","PersonForm","setPersons","setNotification","notiTimer","setNotiTimer","newName","setNewName","newNumber","setNewNumber","nameOf","find","addInfo","a","preventDefault","personService","newInfo","then","response","clearTimeout","setTimeout","concat","data","catch","error","window","confirm","onSubmit","type","PersonList","onClick","deleteHandler","App","notification","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97c693c7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ style, message }) => {\n  if (!message) {\n    return null;\n  }\n\n  return <div className={`noti ${style}`}>{message}</div>;\n};\n\nNotification.propTypes = {\n  style: PropTypes.string.isRequired,\n  message: PropTypes.string.isRequired\n};\nexport default Notification;\n","import React, { useState } from 'react';\nimport Proptypes from 'prop-types';\nconst Filter = ({ persons }) => {\n  const [filterInput, setFilterInput] = useState('');\n  const filterInputHandler = (event) => {\n    setFilterInput(event.target.value);\n  };\n  return (\n    <>\n      filter shown with\n      <input value={filterInput} onChange={filterInputHandler} />\n      {filterInput &&\n        persons\n          .filter(\n            (person) =>\n              !person.name.toLowerCase().indexOf(filterInput.toLowerCase())\n          )\n          .map((person) => (\n            <li key={person.name}>\n              {person.name} {person.number}\n            </li>\n          ))}\n    </>\n  );\n};\n\nFilter.propTypes = {\n  persons: Proptypes.object.isRequired\n};\nexport default Filter;\n","import axios from 'axios';\n\nconst baseUrl = '/api/persons';\n\nconst getAll = () => axios.get(baseUrl);\n\nconst create = (newObject) => axios.post(baseUrl, newObject);\n\nconst update = (id, newObject) => axios.put(`${baseUrl}/${id}`, newObject);\n\nconst remove = (id) => axios.delete(`${baseUrl}/${id}`);\n\nexport default { getAll, create, update, remove };\n","import React, { useState } from 'react';\nimport personService from './services/person';\nimport Proptypes from 'prop-types';\n\nconst PersonForm = ({\n  persons,\n  setPersons,\n  setNotification,\n  notiTimer,\n  setNotiTimer\n}) => {\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n\n  const nameInputHandler = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const numberInputHandler = (event) => {\n    setNewNumber(event.target.value);\n  };\n  const nameOf = () => persons.find((person) => person.name === newName);\n  const addInfo = async (event) => {\n    event.preventDefault();\n    const newInfo = { name: newName, number: newNumber };\n    personService\n      .create(newInfo)\n      .then((response) => {\n        if (notiTimer) {\n          clearTimeout(notiTimer);\n        }\n        setNotiTimer(setTimeout(() => setNotification({}), 3000));\n        setNotification({ style: 'success', message: `Added ${newInfo.name}` });\n        setPersons(persons.concat(response.data));\n      })\n      .catch((error) => {\n        if (nameOf()) {\n          if (\n            window.confirm(`${newName} already existed. do you want to update?`)\n          ) {\n            const { id } = nameOf();\n            personService\n              .update(id, newInfo)\n              .then((response) => {\n                if (notiTimer) {\n                  clearTimeout(notiTimer);\n                }\n                setNotiTimer(setTimeout(() => setNotification({}), 3000));\n                setNotification({\n                  style: 'success',\n                  message: `Updated ${newInfo.name}`\n                });\n                setPersons(() =>\n                  persons.map((person) =>\n                    person.name === newName ? response.data : person\n                  )\n                );\n              })\n              // eslint-disable-next-line no-shadow\n              .catch((error) => {\n                setNotification({\n                  style: 'error',\n                  message: error.response.data.message\n                });\n              });\n          }\n        } else {\n          setNotification({\n            style: 'error',\n            message: error.response.data.message\n          });\n        }\n      });\n  };\n\n  return (\n    <form onSubmit={addInfo}>\n      <div>\n        name:\n        <input value={newName} onChange={nameInputHandler} />\n      </div>\n      <div>\n        number:\n        <input value={newNumber} onChange={numberInputHandler} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nPersonForm.propTypes = {\n  persons: Proptypes.array.isRequired,\n  setPersons: Proptypes.func.isRequired,\n  setNotification: Proptypes.func.isRequired,\n  notiTimer: Proptypes.object.isRequired,\n  setNotiTimer: Proptypes.func.isRequired\n};\nexport default PersonForm;\n","import React from 'react';\nimport personService from '../components/services/person';\nimport Proptypes from 'prop-types';\n\nconst PersonList = ({ persons, setPersons, setNotification, notiTimer, setNotiTimer }) => {\n  const deleteHandler = ({ id, name }) => {\n    if (window.confirm(`delete ${name}?`)) {\n      personService\n        .remove(id)\n        .then((response) => {\n          setPersons(persons.filter((person) => person.id !== id));\n          if (notiTimer) {\n            clearTimeout(notiTimer);\n          }\n          setNotiTimer(setTimeout(() => setNotification({}), 3000));\n          setNotification({ style: 'success', message: `${name} deleted` });\n        })\n        .catch(() => {\n          if (notiTimer) {\n            clearTimeout(notiTimer);\n          }\n          setNotiTimer(setTimeout(() => setNotification({}), 3000));\n          setNotification({\n            style: 'error',\n            message: `${name}' was already removed from server`\n          });\n          setPersons(persons.filter((person) => person.id !== id));\n        });\n    }\n  };\n  return (\n    <ul>\n      {persons.map((person) => (\n        <li key={person.name}>\n          {person.name} {person.number}\n          <button onClick={() => deleteHandler(person)}>delete</button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nPersonList.propTypes = {\n  persons: Proptypes.array.isRequired,\n  setPersons: Proptypes.func.isRequired,\n  setNotification: Proptypes.func.isRequired,\n  notiTimer: Proptypes.object.isRequired,\n  setNotiTimer: Proptypes.func.isRequired\n};\nexport default PersonList;\n","import React, { useState, useEffect } from 'react';\nimport Notification from './Notification';\nimport Filter from './Filter';\nimport PersonForm from './PersonForm';\nimport PersonList from './PersonList';\nimport personService from './services/person';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [notification, setNotification] = useState({});\n  const [notiTimer, setNotiTimer] = useState(null);\n  useEffect(() => {\n    personService.getAll().then((response) => {\n      setPersons(response.data);\n    });\n  }, []);\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification style={notification.style} message={notification.message} />\n      <Filter persons={persons} />\n      <h2>add a new</h2>\n      <PersonForm\n        persons={persons}\n        setPersons={setPersons}\n        setNotification={setNotification}\n        notiTimer={notiTimer}\n        setNotiTimer={setNotiTimer}\n      />\n      <h2>Numbers</h2>\n      <PersonList\n        persons={persons}\n        setPersons={setPersons}\n        setNotification={setNotification}\n        notiTimer={notiTimer}\n        setNotiTimer={setNotiTimer}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}